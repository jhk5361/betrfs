2:	total += sizeof(uint32_t) + sizeof(uint8_t) + sizeof(uint16_t) + txn_buf->key_len + sizeof(uint32_t) + sizeof(uint32_t) + PAGE_SIZE;
2:	txn_buf->off = off;
2:	txn_buf->len = size;
2:	txn_buf->buf = (char*)data;
2:	txn_buf->type = type;
2:	txn_buf->off = off;
2:	txn_buf->len = size;
2:	memcpy(txn_buf->buf+off, data_buf, size);
2:	txn_buf->type = type;
2:	txn_buf->key = kmalloc(dbt->size, GFP_NOIO);
2:	memcpy(txn_buf->key, dbt->data, dbt->size);
2:	txn_buf->key_len = dbt->size;
lightfs_txn_hdlr.c:	//txn_buf->buf = NULL;
lightfs_txn_hdlr.c:	INIT_LIST_HEAD(&_txn_buf->txn_buf_list);
lightfs_txn_hdlr.c:	_txn_buf->txn_buf_cb = NULL;
lightfs_txn_hdlr.c:	kfree(txn_buf->key);
lightfs_txn_hdlr.c:	if (txn_buf->buf) {
lightfs_txn_hdlr.c:		kmem_cache_free(lightfs_buf_cachep, txn_buf->buf);
lightfs_txn_hdlr.c:	txn_buf->txn_id = txn->txn_id;
lightfs_txn_hdlr.c:	txn_buf->db = db;
lightfs_txn_hdlr.c:	txn_buf->completionp = kmem_cache_alloc(lightfs_completion_cachep, GFP_NOIO);
lightfs_txn_hdlr.c:	lightfs_completion_init(txn_buf->completionp);
lightfs_txn_hdlr.c:	txn_buf->txn_buf_cb = lightfs_bstore_txn_get_cb;
lightfs_txn_hdlr.c:	wait_for_completion(txn_buf->completionp);
lightfs_txn_hdlr.c:	lightfs_completion_free(txn_buf->completionp);
lightfs_txn_hdlr.c:	txn_buf->buf = NULL;
lightfs_txn_hdlr.c:	if (txn_buf->ret == DB_NOTFOUND) {
lightfs_txn_hdlr.c:		//value->size = txn_buf->ret;
lightfs_txn_hdlr.c:	txn_buf->txn_id = txn->txn_id;
lightfs_txn_hdlr.c:	txn_buf->db = db;
lightfs_txn_hdlr.c:	txn_buf->completionp = kmem_cache_alloc(lightfs_completion_cachep, GFP_NOIO);
lightfs_txn_hdlr.c:	lightfs_completion_init(txn_buf->completionp);
lightfs_txn_hdlr.c:	txn_buf->buf = (char*)kmem_cache_alloc(lightfs_buf_cachep, GFP_NOIO);
lightfs_txn_hdlr.c:	txn_buf->len = PAGESIZE;
lightfs_txn_hdlr.c:	txn_buf->txn_buf_cb = lightfs_bstore_txn_sync_put_cb;
lightfs_txn_hdlr.c:	wait_for_completion(txn_buf->completionp);
lightfs_txn_hdlr.c:	lightfs_completion_free(txn_buf->completionp);
lightfs_txn_hdlr.c:			txn_buf->ge = 1;
lightfs_txn_hdlr.c:			txn_buf->ge = 0;
lightfs_txn_hdlr.c:		wait_for_completion(txn_buf->completionp);
lightfs_txn_hdlr.c:		if (txn_buf->ret == DB_NOTFOUND) {
lightfs_txn_hdlr.c:		txn_buf->ge = 1;
lightfs_txn_hdlr.c:		wait_for_completion(txn_buf->completionp);
lightfs_txn_hdlr.c:		if (txn_buf->ret == DB_NOTFOUND) {
lightfs_txn_hdlr.c:		txn_buf->ge = 0;
lightfs_txn_hdlr.c:		wait_for_completion(txn_buf->completionp);
lightfs_txn_hdlr.c:		if (txn_buf->ret == DB_NOTFOUND) {
lightfs_txn_hdlr.c:	lightfs_completion_free(txn_buf->completionp);
lightfs_txn_hdlr.c:	txn_buf->buf = NULL;
lightfs_txn_hdlr.c:	txn_buf->txn_id = txn->txn_id;
lightfs_txn_hdlr.c:	txn_buf->completionp = kmem_cache_alloc(lightfs_completion_cachep, GFP_NOIO);
lightfs_txn_hdlr.c:	lightfs_completion_init(txn_buf->completionp);
lightfs_txn_hdlr.c:	txn_buf->txn_buf_cb = lightfs_bstore_dbc_cb;
lightfs_txn_hdlr.c:	txn_buf->txn_id = txn->txn_id;
lightfs_txn_hdlr.c:	txn_buf->db = db;
lightfs_txn_hdlr.c:		txn_buf->buf = (char*)kmem_cache_alloc(lightfs_buf_cachep, GFP_NOIO);
lightfs_txn_hdlr.c:			txn_buf->type = type;
lightfs_txn_hdlr.c:			txn_buf->off = off;
lightfs_txn_hdlr.c:			txn_buf->update = PAGE_SIZE - off;
lightfs_txn_hdlr.c:			memset(txn_buf->buf + off, 0, PAGE_SIZE - off);
lightfs_txn_hdlr.c:			txn_buf->update = value->size;
lightfs_txn_hdlr.c:		txn_buf->len = 4096;
lightfs_txn_hdlr.c:	list_add_tail(&txn_buf->txn_buf_list, &txn->txn_buf_list);
lightfs_txn_hdlr.c:			list_del(&txn_buf->txn_buf_list);
lightfs_txn_hdlr.c:		bloomfilter_set(c_txn->filter, txn_buf->key, txn_buf->key_len);
lightfs_txn_hdlr.c:	txn_buf->txn_id = c_txn->txn_id;
lightfs_txn_hdlr.c:	txn_buf->completionp = kmem_cache_alloc(lightfs_completion_cachep, GFP_NOIO);
lightfs_txn_hdlr.c:	lightfs_completion_init(txn_buf->completionp);
lightfs_txn_hdlr.c:	txn_buf->buf = NULL;
lightfs_txn_hdlr.c:	txn_buf->txn_buf_cb = lightfs_bstore_c_txn_commit_flush_cb;
lightfs_txn_hdlr.c:	wait_for_completion(txn_buf->completionp);
lightfs_txn_hdlr.c:	lightfs_completion_free(txn_buf->completionp);
lightfs_txn_hdlr.c:			if (bloomfilter_get(c_txn->filter, txn_buf->key, txn_buf->key_len)) {
lightfs_txn_hdlr.c:			if (bloomfilter_get(c_txn->filter, txn_buf->key, txn_buf->key_len)) {
lightfs_txn_hdlr.c:				ftfs_error(__func__, "크기가 크다 txn->cnt: %d, txn->size: %d, txn_buf->type: %d\n", txn->cnt, txn->size, txn_buf->type);
lightfs_io.c:			dbt_setup(&key, txn_buf->key, txn_buf->key_len);
lightfs_io.c:			dbt_setup(&value, txn_buf->buf, txn_buf->len);
lightfs_io.c:			switch (txn_buf->type) {
lightfs_io.c:					db_put(txn_buf->db, NULL, &key, &value, 0);
lightfs_io.c:					db_del(txn_buf->db, NULL, &key, 0);
lightfs_io.c:					value.ulen = txn_buf->update;
lightfs_io.c:					db_update(txn_buf->db, NULL, &key, &value, txn_buf->off, 0);
lightfs_io.c:	dbt_setup(&key, txn_buf->key, txn_buf->key_len);
lightfs_io.c:	dbt_setup(&value, txn_buf->buf+txn_buf->off, txn_buf->len);
lightfs_io.c:	txn_buf->ret = db_get(txn_buf->db, NULL, &key, &value, 0);
lightfs_io.c:	txn_buf->txn_buf_cb(txn_buf->completionp);
lightfs_io.c:	dbt_setup(&key, txn_buf->key, txn_buf->key_len);
lightfs_io.c:	dbt_setup(&value, txn_buf->buf+txn_buf->off, txn_buf->len);
lightfs_io.c:	txn_buf->ret = db_put(txn_buf->db, NULL, &key, &value, 0);
lightfs_io.c:	txn_buf->txn_buf_cb(txn_buf->completionp);
lightfs_io.c:			dbt_setup(&key, txn_buf->key, txn_buf->key_len);
lightfs_io.c:			dbt_setup(&value, txn_buf->buf, txn_buf->len);
lightfs_io.c:			switch (txn_buf->type) {
lightfs_io.c:					db_put(txn_buf->db, NULL, &key, &value, 0);
lightfs_io.c:					db_del(txn_buf->db, NULL, &key, 0);
lightfs_io.c:					value.ulen = txn_buf->update;
lightfs_io.c:					db_update(txn_buf->db, NULL, &key, &value, txn_buf->off, 0);
Binary file .lightfs_io.c.swp matches
lightfs_txn_hdlr.h:	total += sizeof(uint8_t) + sizeof(uint16_t) + txn_buf->key_len + sizeof(uint16_t) + sizeof(uint16_t) + txn_buf->len;
lightfs_txn_hdlr.h:	txn_buf->off = off;
lightfs_txn_hdlr.h:	txn_buf->len = size;
lightfs_txn_hdlr.h:	txn_buf->buf = (char*)data;
lightfs_txn_hdlr.h:	txn_buf->type = type;
lightfs_txn_hdlr.h:	txn_buf->off = off;
lightfs_txn_hdlr.h:	txn_buf->len = size;
lightfs_txn_hdlr.h:	memcpy(txn_buf->buf+off, data_buf, size);
lightfs_txn_hdlr.h:	txn_buf->type = type;
lightfs_txn_hdlr.h:	txn_buf->key = kmalloc(dbt->size, GFP_NOIO);
lightfs_txn_hdlr.h:	memcpy(txn_buf->key, dbt->data, dbt->size);
lightfs_txn_hdlr.h:	txn_buf->key_len = dbt->size;
Binary file .lightfs_txn_hdlr.h.swp matches
