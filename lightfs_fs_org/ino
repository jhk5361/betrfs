Binary file ftfs.ko matches
lightfs_super.c:	dbt_init(&ftfs_inode->meta_dbt);
lightfs_super.c:	inode_init_once(&ftfs_inode->vfs_inode);
lightfs_super.c:	meta->u.st.st_ino = inode->i_ino;
lightfs_super.c:	meta->u.st.st_mode = inode->i_mode;
lightfs_super.c:	meta->u.st.st_nlink = inode->i_nlink;
lightfs_super.c:	meta->u.st.st_uid = inode->i_uid.val;
lightfs_super.c:	meta->u.st.st_gid = inode->i_gid.val;
lightfs_super.c:	//meta->u.st.st_uid = inode->i_uid;
lightfs_super.c:	//meta->u.st.st_gid = inode->i_gid;
lightfs_super.c:	meta->u.st.st_uid = from_kuid_munged(inode->i_sb->s_user_ns, inode->i_uid);
lightfs_super.c:	meta->u.st.st_gid = from_kgid_munged(inode->i_sb->s_user_ns, inode->i_gid);
lightfs_super.c:	meta->u.st.st_rdev = inode->i_rdev;
lightfs_super.c:	TIMESPEC_TO_TIME_T(meta->u.st.st_atime, inode->i_atime);
lightfs_super.c:	TIMESPEC_TO_TIME_T(meta->u.st.st_mtime, inode->i_mtime);
lightfs_super.c:	TIMESPEC_TO_TIME_T(meta->u.st.st_ctime, inode->i_ctime);
lightfs_super.c:	down_read(&f_inode->key_lock);
lightfs_super.c:	return &f_inode->meta_dbt;
lightfs_super.c:	up_read(&f_inode->key_lock);
lightfs_super.c:	down_write(&f_inode->key_lock);
lightfs_super.c:	return &f_inode->meta_dbt;
lightfs_super.c:	up_write(&f_inode->key_lock);
lightfs_super.c:	uint64_t ino = inode->i_ino;
lightfs_super.c:	uint64_t ino = inode->i_ino;
lightfs_super.c:		list_del_init(&f_inode->rename_locked);
lightfs_super.c:		dbt_copy(&tmp_dbt, &f_inode->meta_dbt);
lightfs_super.c:		                            &tmp_dbt, &f_inode->meta_dbt);
lightfs_super.c:	circle_id = inode->i_ino;
lightfs_super.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
lightfs_super.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
lightfs_super.c:	sbi = inode->i_sb->s_fs_info;
lightfs_super.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
lightfs_super.c:		if (S_ISDIR(old_inode->i_mode)) {
lightfs_super.c:			if (!S_ISDIR(new_inode->i_mode)) {
lightfs_super.c:			if (S_ISDIR(new_inode->i_mode)) {
lightfs_super.c:		old_meta.u.ino = old_inode->i_ino;
lightfs_super.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
lightfs_super.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
lightfs_super.c:	meta.u.ino = inode->i_ino;
lightfs_super.c:		inode->i_ctime = current_kernel_time();
lightfs_super.c:		struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
lightfs_super.c:		struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
lightfs_super.c:	flags = inode->i_flags & (FS_FL_USER_VISIBLE | FS_PROJINHERIT_FL);
lightfs_super.c:	return ftfs_inode ? &ftfs_inode->vfs_inode : NULL;
lightfs_super.c:	if (ftfs_inode->meta_dbt.data &&
lightfs_super.c:	    ftfs_inode->meta_dbt.data != &root_meta_key)
lightfs_super.c:		dbt_destroy(&ftfs_inode->meta_dbt);
lightfs_super.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
lightfs_super.c:	if (inode->i_nlink == 0)
lightfs_super.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
lightfs_super.c:	if (inode->i_nlink || (FTFS_I(inode)->ftfs_flags & FTFS_FLAG_DELETED))
lightfs_super.c:		/* if (inode->i_size > HOT_FLUSH_THRESHOLD)
lightfs_super.c:					inode->i_size)); */
lightfs_super.c:	truncate_inode_pages(&inode->i_data, 0);
lightfs_super.c:	BUG_ON(ftfs_inode->meta_dbt.data != NULL);
lightfs_super.c:	dbt_copy(&ftfs_inode->meta_dbt, meta_dbt);
lightfs_super.c:	init_rwsem(&ftfs_inode->key_lock);
lightfs_super.c:	INIT_LIST_HEAD(&ftfs_inode->rename_locked);
lightfs_super.c:	ftfs_inode->ftfs_flags = 0;
ftfs_super.c:	dbt_init(&ftfs_inode->meta_dbt);
ftfs_super.c:	inode_init_once(&ftfs_inode->vfs_inode);
ftfs_super.c:	meta->u.st.st_ino = inode->i_ino;
ftfs_super.c:	meta->u.st.st_mode = inode->i_mode;
ftfs_super.c:	meta->u.st.st_nlink = inode->i_nlink;
ftfs_super.c:	meta->u.st.st_uid = inode->i_uid.val;
ftfs_super.c:	meta->u.st.st_gid = inode->i_gid.val;
ftfs_super.c:	//meta->u.st.st_uid = inode->i_uid;
ftfs_super.c:	//meta->u.st.st_gid = inode->i_gid;
ftfs_super.c:	meta->u.st.st_uid = from_kuid_munged(inode->i_sb->s_user_ns, inode->i_uid);
ftfs_super.c:	meta->u.st.st_gid = from_kgid_munged(inode->i_sb->s_user_ns, inode->i_gid);
ftfs_super.c:	meta->u.st.st_rdev = inode->i_rdev;
ftfs_super.c:	TIMESPEC_TO_TIME_T(meta->u.st.st_atime, inode->i_atime);
ftfs_super.c:	TIMESPEC_TO_TIME_T(meta->u.st.st_mtime, inode->i_mtime);
ftfs_super.c:	TIMESPEC_TO_TIME_T(meta->u.st.st_ctime, inode->i_ctime);
ftfs_super.c:	down_read(&f_inode->key_lock);
ftfs_super.c:	return &f_inode->meta_dbt;
ftfs_super.c:	up_read(&f_inode->key_lock);
ftfs_super.c:	down_write(&f_inode->key_lock);
ftfs_super.c:	return &f_inode->meta_dbt;
ftfs_super.c:	up_write(&f_inode->key_lock);
ftfs_super.c:		list_del_init(&f_inode->rename_locked);
ftfs_super.c:		dbt_copy(&tmp_dbt, &f_inode->meta_dbt);
ftfs_super.c:		                            &tmp_dbt, &f_inode->meta_dbt);
ftfs_super.c:	circle_id = inode->i_ino;
ftfs_super.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super.c:	sbi = inode->i_sb->s_fs_info;
ftfs_super.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super.c:		if (S_ISDIR(old_inode->i_mode)) {
ftfs_super.c:			if (!S_ISDIR(new_inode->i_mode)) {
ftfs_super.c:			if (S_ISDIR(new_inode->i_mode)) {
ftfs_super.c:		old_meta.u.ino = old_inode->i_ino;
ftfs_super.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super.c:	meta.u.ino = inode->i_ino;
ftfs_super.c:		inode->i_ctime = current_kernel_time();
ftfs_super.c:		struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super.c:		struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super.c:	flags = inode->i_flags & (FS_FL_USER_VISIBLE | FS_PROJINHERIT_FL);
ftfs_super.c:	return ftfs_inode ? &ftfs_inode->vfs_inode : NULL;
ftfs_super.c:	if (ftfs_inode->meta_dbt.data &&
ftfs_super.c:	    ftfs_inode->meta_dbt.data != &root_meta_key)
ftfs_super.c:		dbt_destroy(&ftfs_inode->meta_dbt);
ftfs_super.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super.c:	if (inode->i_nlink == 0)
ftfs_super.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super.c:	if (inode->i_nlink || (FTFS_I(inode)->ftfs_flags & FTFS_FLAG_DELETED))
ftfs_super.c:		/* if (inode->i_size > HOT_FLUSH_THRESHOLD)
ftfs_super.c:					inode->i_size)); */
ftfs_super.c:	truncate_inode_pages(&inode->i_data, 0);
ftfs_super.c:	BUG_ON(ftfs_inode->meta_dbt.data != NULL);
ftfs_super.c:	dbt_copy(&ftfs_inode->meta_dbt, meta_dbt);
ftfs_super.c:	init_rwsem(&ftfs_inode->key_lock);
ftfs_super.c:	INIT_LIST_HEAD(&ftfs_inode->rename_locked);
ftfs_super.c:	ftfs_inode->ftfs_flags = 0;
Binary file ftfs.o matches
ftfs_super_org.c:	dbt_init(&ftfs_inode->meta_dbt);
ftfs_super_org.c:	inode_init_once(&ftfs_inode->vfs_inode);
ftfs_super_org.c:	meta->u.st.st_ino = inode->i_ino;
ftfs_super_org.c:	meta->u.st.st_mode = inode->i_mode;
ftfs_super_org.c:	meta->u.st.st_nlink = inode->i_nlink;
ftfs_super_org.c:	meta->u.st.st_uid = inode->i_uid.val;
ftfs_super_org.c:	meta->u.st.st_gid = inode->i_gid.val;
ftfs_super_org.c:	//meta->u.st.st_uid = inode->i_uid;
ftfs_super_org.c:	//meta->u.st.st_gid = inode->i_gid;
ftfs_super_org.c:	meta->u.st.st_uid = from_kuid_munged(inode->i_sb->s_user_ns, inode->i_uid);
ftfs_super_org.c:	meta->u.st.st_gid = from_kgid_munged(inode->i_sb->s_user_ns, inode->i_gid);
ftfs_super_org.c:	meta->u.st.st_rdev = inode->i_rdev;
ftfs_super_org.c:	TIMESPEC_TO_TIME_T(meta->u.st.st_atime, inode->i_atime);
ftfs_super_org.c:	TIMESPEC_TO_TIME_T(meta->u.st.st_mtime, inode->i_mtime);
ftfs_super_org.c:	TIMESPEC_TO_TIME_T(meta->u.st.st_ctime, inode->i_ctime);
ftfs_super_org.c:	down_read(&f_inode->key_lock);
ftfs_super_org.c:	return &f_inode->meta_dbt;
ftfs_super_org.c:	up_read(&f_inode->key_lock);
ftfs_super_org.c:	down_write(&f_inode->key_lock);
ftfs_super_org.c:	return &f_inode->meta_dbt;
ftfs_super_org.c:	up_write(&f_inode->key_lock);
ftfs_super_org.c:		list_del_init(&f_inode->rename_locked);
ftfs_super_org.c:		dbt_copy(&tmp_dbt, &f_inode->meta_dbt);
ftfs_super_org.c:		                            &tmp_dbt, &f_inode->meta_dbt);
ftfs_super_org.c:	if (!hlist_empty(&inode->i_dentry)) {
ftfs_super_org.c:		spin_lock(&inode->i_lock);
ftfs_super_org.c:		hlist_for_each_entry(de, &inode->i_dentry, d_alias) {
ftfs_super_org.c:			if (S_ISDIR(inode->i_mode) || !d_unhashed(de)) {
ftfs_super_org.c:		spin_unlock(&inode->i_lock);
ftfs_super_org.c:	circle_id = inode->i_ino;
ftfs_super_org.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super_org.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super_org.c:	sbi = inode->i_sb->s_fs_info;
ftfs_super_org.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super_org.c:		if (S_ISDIR(old_inode->i_mode)) {
ftfs_super_org.c:			if (!S_ISDIR(new_inode->i_mode)) {
ftfs_super_org.c:			if (S_ISDIR(new_inode->i_mode)) {
ftfs_super_org.c:		old_meta.u.ino = old_inode->i_ino;
ftfs_super_org.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super_org.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super_org.c:	meta.u.ino = inode->i_ino;
ftfs_super_org.c:		inode->i_ctime = current_kernel_time();
ftfs_super_org.c:		struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super_org.c:		struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super_org.c:	flags = inode->i_flags & (FS_FL_USER_VISIBLE | FS_PROJINHERIT_FL);
ftfs_super_org.c:	return ftfs_inode ? &ftfs_inode->vfs_inode : NULL;
ftfs_super_org.c:	if (ftfs_inode->meta_dbt.data &&
ftfs_super_org.c:	    ftfs_inode->meta_dbt.data != &root_meta_key)
ftfs_super_org.c:		dbt_destroy(&ftfs_inode->meta_dbt);
ftfs_super_org.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super_org.c:	if (inode->i_nlink == 0)
ftfs_super_org.c:	    inode->i_nlink == 1) {
ftfs_super_org.c:	struct ftfs_sb_info *sbi = inode->i_sb->s_fs_info;
ftfs_super_org.c:	if (inode->i_nlink || (FTFS_I(inode)->ftfs_flags & FTFS_FLAG_DELETED))
ftfs_super_org.c:		/* if (inode->i_size > HOT_FLUSH_THRESHOLD)
ftfs_super_org.c:					inode->i_size)); */
ftfs_super_org.c:	truncate_inode_pages(&inode->i_data, 0);
ftfs_super_org.c:	BUG_ON(ftfs_inode->meta_dbt.data != NULL);
ftfs_super_org.c:	dbt_copy(&ftfs_inode->meta_dbt, meta_dbt);
ftfs_super_org.c:	init_rwsem(&ftfs_inode->key_lock);
ftfs_super_org.c:	INIT_LIST_HEAD(&ftfs_inode->rename_locked);
ftfs_super_org.c:	ftfs_inode->ftfs_flags = 0;
lightfs_bstore.c:	uint64_t ino = inode->i_ino;
lightfs_bstore.c:	info.ino = inode->
Binary file .lightfs_bstore.c.swp matches
Binary file lightfs_super.o matches
